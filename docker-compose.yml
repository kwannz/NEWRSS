version: "3.9"

services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: newrss
      POSTGRES_USER: newrss
      POSTGRES_PASSWORD: newrss
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U newrss"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build: ./backend
    command: uvicorn app.main:asgi_app --host 0.0.0.0 --port 8000 --reload
    environment:
      - DATABASE_URL=postgresql+asyncpg://newrss:newrss@postgres:5432/newrss
      - REDIS_URL=redis://redis:6379/0
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-}
      - TELEGRAM_WEBHOOK_URL=${TELEGRAM_WEBHOOK_URL:-}
      - TELEGRAM_SECRET_TOKEN=${TELEGRAM_SECRET_TOKEN:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ENV=dev
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    restart: unless-stopped

  celery-worker:
    build: ./backend
    command: celery -A app.tasks.news_crawler.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql+asyncpg://newrss:newrss@postgres:5432/newrss
      - REDIS_URL=redis://redis:6379/0
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ENV=dev
    depends_on:
      - backend
      - redis
      - postgres
    volumes:
      - ./backend:/app
    restart: unless-stopped

  celery-beat:
    build: ./backend
    command: celery -A app.tasks.news_crawler.celery_app beat --loglevel=info
    environment:
      - REDIS_URL=redis://redis:6379/0
      - ENV=dev
    depends_on:
      - redis
    volumes:
      - ./backend:/app
    restart: unless-stopped

  frontend:
    build: ./frontend
    command: npm run dev
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=http://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  pg_data:
  redis_data: