[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "newrss-backend"
version = "1.0.0"
description = "NEWRSS - Real-time cryptocurrency news aggregation platform backend"
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Communications :: Chat",
    "Topic :: Database",
]

dependencies = [
    "fastapi==0.104.1",
    "uvicorn[standard]==0.24.0",
    "pydantic==2.5.0",
    "pydantic-settings==2.1.0",
    "sqlalchemy==2.0.23",
    "asyncpg==0.29.0",
    "alembic==1.13.1",
    "redis==5.0.1",
    "celery==5.3.4",
    "python-socketio==5.10.0",
    "python-jose[cryptography]==3.3.0",
    "passlib[bcrypt]==1.7.4",
    "aiohttp==3.9.1",
    "feedparser==6.0.10",
    "python-telegram-bot==20.7",
    "openai==1.3.8",
    "prometheus-client==0.19.0",
    "python-multipart==0.0.6",
    "structlog==23.2.0",
    "python-json-logger==2.0.7",
    "slowapi==0.1.9",
    "bleach==6.1.0",
    "websockets==12.0",
    "aioredis==2.0.1",
    "aiosqlite==0.19.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.8",
    "mypy>=1.8.0",
    "black>=23.12.0",
    "isort>=5.13.0",
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.2",
    "faker>=20.1.0",
    "factory-boy>=3.3.0",
    "pre-commit>=3.6.0",
]

[project.urls]
"Homepage" = "https://github.com/kwannz/newrss"
"Bug Reports" = "https://github.com/kwannz/newrss/issues"
"Source" = "https://github.com/kwannz/newrss"

# Ruff configuration for linting and formatting
[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = [
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "C90",  # mccabe complexity
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "Q",    # flake8-quotes
    "W",    # pycodestyle warnings
]
ignore = [
    "E501",   # Line too long (handled by formatter)
]
unfixable = []
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "__pycache__",
    "alembic/versions",
    "venv",
    ".venv",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["app"]
force-sort-within-sections = true

[tool.ruff.lint.mccabe]
max-complexity = 10

# Black configuration for consistent formatting
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | alembic/versions
)/
'''

# isort configuration for import sorting
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["app"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# MyPy configuration for type checking
[tool.mypy]
python_version = "3.12"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
exclude = [
    "alembic/",
    "venv/",
    ".venv/",
    "tests/",
]

[[tool.mypy.overrides]]
module = [
    "feedparser.*",
    "celery.*",
    "redis.*",
    "telegram.*",
    "openai.*",
    "factory.*",
    "faker.*",
    "pytest_asyncio.*",
    "slowapi.*",
    "structlog.*",
    "prometheus_client.*",
    "python_json_logger.*",
    "socketio.*",
    "passlib.*",
    "jose.*",
    "bleach.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=app",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=95",
    "--strict-markers",
    "-v",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security-focused tests",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore:.*unclosed.*:ResourceWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/alembic/*",
    "*/__pycache__/*",
    "*/migrations/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"