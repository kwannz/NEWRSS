# Production Docker Compose Configuration for NEWRSS
version: "3.9"

services:
  # ============================================================================
  # Database Service
  # ============================================================================
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - newrss-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '0.5'
        reservations:
          memory: 512m
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # ============================================================================
  # Redis Service
  # ============================================================================
  redis:
    image: redis:7-alpine
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - newrss-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: '0.25'
        reservations:
          memory: 256m
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # ============================================================================
  # Backend Service
  # ============================================================================
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_WEBHOOK_URL=${TELEGRAM_WEBHOOK_URL}
      - TELEGRAM_SECRET_TOKEN=${TELEGRAM_SECRET_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CORS_ORIGINS=${CORS_ORIGINS}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - newrss-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '0.5'
        reservations:
          memory: 512m
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "python", "healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/log/newrss
    volumes:
      - app_logs:/var/log/newrss

  # ============================================================================
  # Celery Worker Service
  # ============================================================================
  celery-worker:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    command: celery -A app.tasks.news_crawler.celery_app worker --loglevel=info --concurrency=${CELERY_WORKER_CONCURRENCY:-8} --max-tasks-per-child=${CELERY_WORKER_MAX_TASKS_PER_CHILD:-1000}
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - newrss-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: '1.0'
        reservations:
          memory: 1g
          cpus: '0.5'
      replicas: 2
    healthcheck:
      test: ["CMD", "celery", "-A", "app.tasks.news_crawler.celery_app", "inspect", "ping"]
      interval: 60s
      timeout: 30s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/log/newrss
    volumes:
      - app_logs:/var/log/newrss

  # ============================================================================
  # Celery Beat Service
  # ============================================================================
  celery-beat:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    command: celery -A app.tasks.news_crawler.celery_app beat --loglevel=info --schedule=/tmp/celerybeat-schedule
    environment:
      - REDIS_URL=redis://redis:6379/0
      - ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - newrss-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256m
          cpus: '0.1'
        reservations:
          memory: 128m
          cpus: '0.05'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    volumes:
      - celery_beat_data:/app/data

  # ============================================================================
  # Frontend Service
  # ============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
        - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL}
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - newrss-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: '0.25'
        reservations:
          memory: 256m
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # ============================================================================
  # Nginx Reverse Proxy
  # ============================================================================
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - newrss-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256m
          cpus: '0.25'
        reservations:
          memory: 128m
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

networks:
  newrss-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  pg_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  celery_beat_data:
    driver: local
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local